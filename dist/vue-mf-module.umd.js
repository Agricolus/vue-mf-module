(function(l,u){typeof exports=="object"&&typeof module<"u"?u(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],u):(l=typeof globalThis<"u"?globalThis:l||self,u(l.VueMfModule={},l.Vue))})(this,function(l,u){"use strict";var ae=Object.defineProperty;var oe=(l,u,v)=>u in l?ae(l,u,{enumerable:!0,configurable:!0,writable:!0,value:v}):l[u]=v;var d=(l,u,v)=>(oe(l,typeof u!="symbol"?u+"":u,v),v);var v={exports:{}};function V(){}V.prototype={on:function(n,e,t){var r=this.e||(this.e={});return(r[n]||(r[n]=[])).push({fn:e,ctx:t}),this},once:function(n,e,t){var r=this;function i(){r.off(n,i),e.apply(t,arguments)}return i._=e,this.on(n,i,t)},emit:function(n){var e=[].slice.call(arguments,1),t=((this.e||(this.e={}))[n]||[]).slice(),r=0,i=t.length;for(r;r<i;r++)t[r].fn.apply(t[r].ctx,e);return this},off:function(n,e){var t=this.e||(this.e={}),r=t[n],i=[];if(r&&e)for(var s=0,c=r.length;s<c;s++)r[s].fn!==e&&r[s].fn._!==e&&i.push(r[s]);return i.length?t[n]=i:delete t[n],this}},v.exports=V;var F=v.exports.TinyEmitter=V,T=(n=>(n[n.drawer=0]="drawer",n[n.bottom=1]="bottom",n[n.header=2]="header",n))(T||{});const $={menuDefinitionAdded:"newmenuitem"},C=class{constructor(){d(this,"menuDefinitions",[]);d(this,"menuStructure",{});d(this,"notifications",new F)}get Notifications(){return this.notifications}static get Instance(){return C.instance}addMenuDefinition(e,...t){let r=this.menuDefinitions.find(i=>i.name==e.name);r?e=r:this.menuDefinitions.push(e);for(const i of t)this.menuStructure[i.section]=this.menuStructure[i.section]||{},this.menuStructure[i.section][i.parent||e.name]=this.menuStructure[i.section][i.parent||e.name]||[],i.parent&&this.menuStructure[i.section][i.parent].push(e.name);this.notifications.emit($.menuDefinitionAdded,e)}getMenuItem(e){return this.menuDefinitions.find(t=>t.name==e)}getMenu(e){let t=[],r=new Set;for(const i in this.menuStructure[e]){const s=this.menuStructure[e][i];let c={item:this.menuDefinitions.find(a=>a.name==i&&(!a.hidden||!a.hidden())),children:s.map(a=>this.menuDefinitions.find(o=>o.name==a&&(!o.hidden||!o.hidden()))).filter(a=>!!a).sort((a,o)=>a&&o&&a.orderIndex&&o.orderIndex&&a.orderIndex>o.orderIndex?1:a&&o&&a.orderIndex&&o.orderIndex&&a.orderIndex<o.orderIndex?-1:0)};c.item&&(r.add(i),s.forEach(a=>r.add(a)),t.push(c))}return t.filter(i=>!!i.item).sort((i,s)=>i&&s&&i.item&&s.item&&i.item.orderIndex&&s.item.orderIndex&&i.item.orderIndex>s.item.orderIndex?1:i&&s&&i.item&&s.item&&i.item.orderIndex&&s.item.orderIndex&&i.item.orderIndex<s.item.orderIndex?-1:0)}};let m=C;d(m,"instance",new C);const E=class{constructor(){d(this,"registry",new Map);d(this,"groupedregistry",new Map);d(this,"serviceregistry",new Map);d(this,"groupedserviceregistry",new Map)}static get Instance(){return this.instance}static set Instance(e){this.instance=e}provideComponent(e,t,r){if(this.registry.set(r?`${r}-${t}`:t,e),r){this.groupedregistry.has(r)||this.groupedregistry.set(r,new Map);let i=this.groupedregistry.get(r);i&&i.set(t,e)}}getComponent(e,t){return this.registry.get(t?`${t}-${e}`:e)||null}getComponents(...e){return Array.from(this.registry.entries()).filter(t=>e.indexOf(t[0])>=0).map(t=>t[1])}getGroupComponents(e,...t){let r=this.groupedregistry.get(e);return r?Array.from(r.entries()||[]).filter(i=>!t||t.length==0||t.indexOf(i[0])>=0).map(i=>i[1]):[]}getGroupComponentsKeys(e){let t=this.groupedregistry.get(e);return t?Array.from(t.keys()):[]}provideService(e,t,r){if(this.serviceregistry.set(e,t),r){this.groupedserviceregistry.has(r)||this.groupedserviceregistry.set(r,new Map);let i=this.groupedserviceregistry.get(r);i&&i.set(e,t)}}getService(e){return this.serviceregistry.get(e)||null}getGroupServices(e,...t){let r=this.groupedserviceregistry.get(e);return r?Array.from(r.entries()||[]).filter(i=>!t||t.length==0||t.indexOf(i[0])>=0).map(i=>i[1]):[]}};let f=E;d(f,"instance",new E);const w=new Map,I=new Map,M=new Map,G=(n,...e)=>new Promise(t=>{var c;let r=(c=w.get(n))==null?void 0:c.port1;if(!r){const a=new MessageChannel;w.set(n,a),r=a.port1}let i=new MessageChannel;const s=a=>{t(a.data),i=null};i.port1.onmessage=s,r.postMessage(e,[i.port2])}),z=(n,e,t={force:!1})=>{var s;let r=(s=w.get(n))==null?void 0:s.port2;if(!r){const c=new MessageChannel;w.set(n,c),r=c.port2}if(!t.force&&r.onmessage)throw"reply already set for message "+n;const i=async c=>{const a=c.ports[0],o=await e(...c.data);a.postMessage(o),a.close()};return r.onmessage=i,()=>{r.onmessage=null}},X=(n,...e)=>{var r;let t=(r=I.get(n))==null?void 0:r.port1;if(!t){const i=new MessageChannel;I.set(n,i),t=i.port1}t.postMessage(e)},x=(n,e)=>{var i;let t=(i=I.get(n))==null?void 0:i.port2;if(!t){const s=new MessageChannel;I.set(n,s),t=s.port2}const r=s=>{e(...s.data)};return M.set(e,r),t.addEventListener("message",r),t.start(),()=>{t==null||t.removeEventListener("message",r),M.delete(e)}},j={Instance:{ask:G,reply:z,send:X,subscribe:x,once:(n,e)=>{const t=x(n,(...r)=>{e(...r),t()})},unsubscribe:(n,e)=>{var i;let t=(i=I.get(n))==null?void 0:i.port2;if(!t)return;const r=M.get(e);r&&(t.removeEventListener("message",r),M.delete(e))}}},B=u.defineComponent({name:"inject",props:{id:{default:null},type:{default:null,type:String},value:{default:null},name:{type:String,default:null},names:{type:Array,default:null},group:{type:String,default:null},metadata:{type:Object,default:null},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1}},setup(n,{emit:e}){const t=u.computed({get:()=>n.value,set:c=>{e("input",c)}}),r=u.computed(()=>n.name?[f.Instance.getComponent(n.name,n.group)]:n.group?f.Instance.getGroupComponents(n.group,...n.names||[]):f.Instance.getComponents(...n.names||[])),i=(...c)=>{e("click",...c)},s=(...c)=>{e("save",...c)};return{id:n.id,type:n.type,value:n.value,name:n.name,names:n.names,group:n.group,metadata:n.metadata,disabled:n.disabled,readonly:n.readonly,click:i,save:s,Components:r,Value:t}}});function N(n,e,t,r,i,s,c,a){var o=typeof n=="function"?n.options:n;e&&(o.render=e,o.staticRenderFns=t,o._compiled=!0),r&&(o.functional=!0),s&&(o._scopeId="data-v-"+s);var g;if(c?(g=function(h){h=h||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,!h&&typeof __VUE_SSR_CONTEXT__<"u"&&(h=__VUE_SSR_CONTEXT__),i&&i.call(this,h),h&&h._registeredComponents&&h._registeredComponents.add(c)},o._ssrRegister=g):i&&(g=a?function(){i.call(this,(o.functional?this.parent:this).$root.$options.shadowRoot)}:i),g)if(o.functional){o._injectStyles=g;var A=o.render;o.render=function(se,U){return g.call(U),A(se,U)}}else{var L=o.beforeCreate;o.beforeCreate=L?[].concat(L,g):[g]}return{exports:n,options:o}}var K=function(){var e=this,t=e._self._c;return e._self._setupProxy,t("div",e._l(e.Components,function(r,i){return t(r,{key:i,tag:"component",attrs:{disabled:e.disabled,readonly:e.readonly,id:e.id,type:e.type,metadata:e.metadata},on:{click:e.click,save:e.save},model:{value:e.Value,callback:function(s){e.Value=s},expression:"Value"}})}),1)},W=[],q=N(B,K,W,!1,null,null,null,null);const k=q.exports,S=class{constructor(){d(this,"screens",new Map);d(this,"projecting",new Map)}static get Instance(){return S.instance}static set Instance(e){this.instance=e}setScreen(e,t="defaultscreen"){this.screens.set(t,e)}projectTo(e,t=null,r="defaultscreen",i=!0,s=!1){const c={data:t},a=s?new Promise((g,A)=>{c.reject=A,c.resolve=g}):null;i?(this.projecting.has(r)||this.projecting.set(r,[]),(this.projecting.get(r)||[]).push({component:e,model:c,promise:a,queue:i})):this.projecting.set(r,[{component:e,model:c,promise:a,queue:i}]);const o=this.screens.get(r);return o?(o.model=c,o.currentView=e,a&&a.then(()=>this.stopProjecting(r)).catch(()=>this.stopProjecting(r)),a):null}projectAsyncTo(e,t,r="defaultscreen",i=!0){return this.projectTo(e,t,r,i,!0)}stopProjecting(e="defaultscreen"){this.projecting.has(e)&&(this.projecting.get(e)||[]).pop();let t=this.screens.get(e);if(t&&t.currentView){if(t.model=null,t.screenModel=null,t.currentView=null,this.projecting.has(e)){let r=this.projecting.get(e);if(r&&r.length){let i=r.pop();i&&this.projectTo(i.component,i.model,e,i.queue,!!i.promise)}}return!0}return!1}};let p=S;d(p,"instance",new S);const H=u.defineComponent({name:"screen",props:{name:{type:String,default:"defaultscreen"}},setup(n,{expose:e}){const t=u.getCurrentInstance(),r=u.ref(null),i=u.ref(null);e({currentView:r,model:i});const s=u.computed(()=>r.value!=null),c=u.computed(()=>{var a;return(a=r.value)==null?void 0:a.__file});return u.onMounted(()=>{p.Instance.setScreen(t.proxy,n.name)}),{currentViewUID:c,currentView:r,model:i,isVisible:s}}});var J=function(){var e=this,t=e._self._c;return e._self._setupProxy,t("div",{directives:[{name:"show",rawName:"v-show",value:e.isVisible,expression:"isVisible"}]},[e.currentView?t(e.currentView,{key:e.currentViewUID,tag:"component",attrs:{value:e.model}}):e._e()],1)},Q=[],Y=N(H,J,Q,!1,null,null,null,null);const D=Y.exports,O={projectToDirective:{inserted:(n,e)=>{y.Instance.injectTo(n,e.arg)},unbind:(n,e)=>{y.Instance.removeFrom(n,e.arg)}},screenDirective:{bind:(n,e)=>{!n||y.Instance.setScreen(n,e.arg)}}},b=class{constructor(){d(this,"screens",new Map)}static get Instance(){return b.instance}static set Instance(e){this.instance=e}injectTo(e,t){if(!(!e||!t)){var r=this.screens.has(t)?this.screens.get(t):null;try{e.parentElement&&e.removeChild(e)}catch{}r&&r.append(e)}}removeFrom(e,t){if(!(!e||!t)){var r=this.screens.has(t)?this.screens.get(t):null;try{r&&r.removeChild(e)}catch{}}}setScreen(e,t="defaultscreen"){this.screens.set(t,e)}};let y=b;d(y,"instance",new b);function _(n,e){if(n.target.validity){let t=n.target;if(t.validity){let r=[t.validity.badInput?"bad input":null,t.validity.customError?"custom error":null,t.validity.patternMismatch?"pattern mismatch":null,t.validity.rangeOverflow?"range overflow":null,t.validity.rangeUnderflow?"range underflow":null,t.validity.stepMismatch?"step mismatch":null,t.validity.tooLong?"too long":null,t.validity.tooShort?"too short":null,t.validity.typeMismatch?"type mismatch":null,t.validity.valueMissing?"value missing":null].filter(i=>!!i);e(r,t.validity.valid!=null?t.validity.valid:!0)}}}const R={inserted:(n,e)=>{if(!(!n||!n.willValidate)){switch(n.nodeName){case"INPUT":case"TEXTAREA":n.onblur=t=>_(t,e.value);break;case"SELECT":n.onchange=t=>_(t,e.value);break}n.oninvalid=t=>_(t,e.value),n.form&&n.form.addEventListener("invalid",()=>_({target:n},e.value)),e.arg=="immediate"?n.reportValidity():_({target:n},e.value)}},unbind:n=>{}};function Z(n){n.component("screen",D),n.component("inject",k),n.directive("screen",O.screenDirective),n.directive("projectTo",O.projectToDirective),n.directive("validate",R)}function ee(n){let e={};return{init(t,r,i,s){return s.registry&&(f.Instance=s.registry),s.messageService&&(j.Instance=s.messageService),s.projector&&(p.Instance=s.projector),s.screens&&(y.Instance=s.screens),e=i,n.init(P,t,r,i)},config(t,r){return n.config?n.config(t,r,e):null},run(t,r){return n.run?n.run(t,r,e):null},routes:n.routes}}function te(n,e,t){const r=n.default.default||n.default;return r.init(m.Instance,e,t||{},{registry:f.Instance,messageService:j.Instance,projector:p.Instance,screens:y.Instance}).then(()=>r)}function ne(n,e){return(n.default.default||n.default).config(m.Instance,e)}function re(n,e){return(n.default.default||n.default).run(m.Instance,e)}function ie(n){return(n.default.default||n.default).routes}const P={install:Z,MenuHelper:new m,menuType:T,CommonRegistry:new f,MessageService:j,Inject:k,Screen:D,ValidateDirective:R,MenuNotifications:$,Projector:p};l.CommonRegistry=f,l.ConfigModule=ne,l.InitModule=te,l.Inject=k,l.MenuHelper=m,l.MenuNotifications=$,l.MessageService=j,l.ModuleInitializer=ee,l.ModuleRoutes=ie,l.Projector=p,l.RunModule=re,l.Screen=D,l.ValidateDirective=R,l.default=P,l.menuType=T,Object.defineProperties(l,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
