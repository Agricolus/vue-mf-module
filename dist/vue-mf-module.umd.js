(function(o,c){typeof exports=="object"&&typeof module<"u"?c(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],c):(o=typeof globalThis<"u"?globalThis:o||self,c(o.VueMfModule={},o.Vue))})(this,function(o,c){"use strict";var ee=Object.defineProperty;var te=(o,c,v)=>c in o?ee(o,c,{enumerable:!0,configurable:!0,writable:!0,value:v}):o[c]=v;var d=(o,c,v)=>(te(o,typeof c!="symbol"?c+"":c,v),v);var v={exports:{}};function C(){}C.prototype={on:function(n,e,t){var i=this.e||(this.e={});return(i[n]||(i[n]=[])).push({fn:e,ctx:t}),this},once:function(n,e,t){var i=this;function r(){i.off(n,r),e.apply(t,arguments)}return r._=e,this.on(n,r,t)},emit:function(n){var e=[].slice.call(arguments,1),t=((this.e||(this.e={}))[n]||[]).slice(),i=0,r=t.length;for(i;i<r;i++)t[i].fn.apply(t[i].ctx,e);return this},off:function(n,e){var t=this.e||(this.e={}),i=t[n],r=[];if(i&&e)for(var s=0,l=i.length;s<l;s++)i[s].fn!==e&&i[s].fn._!==e&&r.push(i[s]);return r.length?t[n]=r:delete t[n],this}},v.exports=C;var A=v.exports.TinyEmitter=C,V=(n=>(n[n.drawer=0]="drawer",n[n.bottom=1]="bottom",n[n.header=2]="header",n))(V||{});const T={menuDefinitionAdded:"newmenuitem"},w=class{constructor(){d(this,"menuDefinitions",[]);d(this,"menuStructure",{});d(this,"notifications",new A)}get Notifications(){return this.notifications}static get Instance(){return w.instance}addMenuDefinition(e,...t){let i=this.menuDefinitions.find(r=>r.name==e.name);i?e=i:this.menuDefinitions.push(e);for(const r of t)this.menuStructure[r.section]=this.menuStructure[r.section]||{},this.menuStructure[r.section][r.parent||e.name]=this.menuStructure[r.section][r.parent||e.name]||[],r.parent&&this.menuStructure[r.section][r.parent].push(e.name);this.notifications.emit(T.menuDefinitionAdded,e)}getMenuItem(e){return this.menuDefinitions.find(t=>t.name==e)}getMenu(e){let t=[],i=new Set;for(const r in this.menuStructure[e]){const s=this.menuStructure[e][r];let l={item:this.menuDefinitions.find(u=>u.name==r&&(!u.hidden||!u.hidden())),children:s.map(u=>this.menuDefinitions.find(a=>a.name==u&&(!a.hidden||!a.hidden()))).filter(u=>!!u).sort((u,a)=>u&&a&&u.orderIndex&&a.orderIndex&&u.orderIndex>a.orderIndex?1:u&&a&&u.orderIndex&&a.orderIndex&&u.orderIndex<a.orderIndex?-1:0)};l.item&&(i.add(r),s.forEach(u=>i.add(u)),t.push(l))}return t.filter(r=>!!r.item).sort((r,s)=>r&&s&&r.item&&s.item&&r.item.orderIndex&&s.item.orderIndex&&r.item.orderIndex>s.item.orderIndex?1:r&&s&&r.item&&s.item&&r.item.orderIndex&&s.item.orderIndex&&r.item.orderIndex<s.item.orderIndex?-1:0)}};let m=w;d(m,"instance",new w);const D=class{constructor(){d(this,"registry",new Map);d(this,"groupedregistry",new Map);d(this,"serviceregistry",new Map);d(this,"groupedserviceregistry",new Map)}static get Instance(){return this.instance}static set Instance(e){this.instance=e}provideComponent(e,t,i){if(this.registry.set(i?`${i}-${t}`:t,e),i){this.groupedregistry.has(i)||this.groupedregistry.set(i,new Map);let r=this.groupedregistry.get(i);r&&r.set(t,e)}}getComponent(e,t){return this.registry.get(t?`${t}-${e}`:e)||null}getComponents(...e){return Array.from(this.registry.entries()).filter(t=>e.indexOf(t[0])>=0).map(t=>t[1])}getGroupComponents(e,...t){let i=this.groupedregistry.get(e);return i?Array.from(i.entries()||[]).filter(r=>!t||t.length==0||t.indexOf(r[0])>=0).map(r=>r[1]):[]}getGroupComponentsKeys(e){let t=this.groupedregistry.get(e);return t?Array.from(t.keys()):[]}provideService(e,t,i){if(this.serviceregistry.set(e,t),i){this.groupedserviceregistry.has(i)||this.groupedserviceregistry.set(i,new Map);let r=this.groupedserviceregistry.get(i);r&&r.set(e,t)}}getService(e){return this.serviceregistry.get(e)||null}getGroupServices(e,...t){let i=this.groupedserviceregistry.get(e);return i?Array.from(i.entries()||[]).filter(r=>!t||t.length==0||t.indexOf(r[0])>=0).map(r=>r[1]):[]}};let f=D;d(f,"instance",new D);const j=class{constructor(){d(this,"notifier",new A)}static get Instance(){return j.instance}static set Instance(e){this.instance=e}send(e,...t){this.notifier.emit(e,...t)}subscribe(e,t,i){this.notifier.on(e,t,i)}once(e,t,i){this.notifier.once(e,t,i)}unsubscribe(e,t){this.notifier.off(e,t)}ask(e,...t){return new Promise((i,r)=>{this.notifier.emit(`$ask-${e}`,{resolve:i,reject:r,args:t})})}reply(e,t){this.notifier.on(`$ask-${e}`,i=>{try{let r=t(...i.args);i.resolve(r)}catch{i.reject()}})}};let I=j;d(I,"instance",new j);const U=c.defineComponent({name:"inject",props:{id:{default:null},type:{default:null,type:String},value:{default:null},name:{type:String,default:null},names:{type:Array,default:null},group:{type:String,default:null},metadata:{type:Object,default:null},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1}},setup(n,{emit:e}){const t=c.computed({get:()=>n.value,set:l=>{e("input",l)}}),i=c.computed(()=>n.name?[f.Instance.getComponent(n.name,n.group)]:n.group?f.Instance.getGroupComponents(n.group,...n.names||[]):f.Instance.getComponents(...n.names||[])),r=(...l)=>{e("click",...l)},s=(...l)=>{e("save",...l)};return{id:n.id,type:n.type,value:n.value,name:n.name,names:n.names,group:n.group,metadata:n.metadata,disabled:n.disabled,readonly:n.readonly,click:r,save:s,Components:i,Value:t}}});function x(n,e,t,i,r,s,l,u){var a=typeof n=="function"?n.options:n;e&&(a.render=e,a.staticRenderFns=t,a._compiled=!0),i&&(a.functional=!0),s&&(a._scopeId="data-v-"+s);var h;if(l?(h=function(g){g=g||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,!g&&typeof __VUE_SSR_CONTEXT__<"u"&&(g=__VUE_SSR_CONTEXT__),r&&r.call(this,g),g&&g._registeredComponents&&g._registeredComponents.add(l)},a._ssrRegister=h):r&&(h=u?function(){r.call(this,(a.functional?this.parent:this).$root.$options.shadowRoot)}:r),h)if(a.functional){a._injectStyles=h;var R=a.render;a.render=function(Z,P){return h.call(P),R(Z,P)}}else{var O=a.beforeCreate;a.beforeCreate=O?[].concat(O,h):[h]}return{exports:n,options:a}}var F=function(){var e=this,t=e._self._c;return e._self._setupProxy,t("div",e._l(e.Components,function(i,r){return t(i,{key:r,tag:"component",attrs:{disabled:e.disabled,readonly:e.readonly,id:e.id,type:e.type,metadata:e.metadata},on:{click:e.click,save:e.save},model:{value:e.Value,callback:function(s){e.Value=s},expression:"Value"}})}),1)},G=[],z=x(U,F,G,!1,null,null,null,null);const $=z.exports,M=class{constructor(){d(this,"screens",new Map);d(this,"projecting",new Map)}static get Instance(){return M.instance}static set Instance(e){this.instance=e}setScreen(e,t="defaultscreen"){this.screens.set(t,e)}projectTo(e,t=null,i="defaultscreen",r=!0,s=!1){const l={data:t},u=s?new Promise((h,R)=>{l.reject=R,l.resolve=h}):null;r?(this.projecting.has(i)||this.projecting.set(i,[]),(this.projecting.get(i)||[]).push({component:e,model:l,promise:u,queue:r})):this.projecting.set(i,[{component:e,model:l,promise:u,queue:r}]);const a=this.screens.get(i);return a?(a.model=l,a.currentView=e,u&&u.then(()=>this.stopProjecting(i)).catch(()=>this.stopProjecting(i)),u):null}projectAsyncTo(e,t,i="defaultscreen",r=!0){return this.projectTo(e,t,i,r,!0)}stopProjecting(e="defaultscreen"){this.projecting.has(e)&&(this.projecting.get(e)||[]).pop();let t=this.screens.get(e);if(t&&t.currentView){if(t.model=null,t.screenModel=null,t.currentView=null,this.projecting.has(e)){let i=this.projecting.get(e);if(i&&i.length){let r=i.pop();r&&this.projectTo(r.component,r.model,e,r.queue,!!r.promise)}}return!0}return!1}};let p=M;d(p,"instance",new M);const L=c.defineComponent({name:"screen",props:{name:{type:String,default:"defaultscreen"}},setup(n,{expose:e}){const t=c.getCurrentInstance(),i=c.ref(null),r=c.ref(null);e({currentView:i,model:r});const s=c.computed(()=>i.value!=null),l=c.computed(()=>{var u;return(u=i.value)==null?void 0:u.__file});return c.onMounted(()=>{p.Instance.setScreen(t.proxy,n.name)}),{currentViewUID:l,currentView:i,model:r,isVisible:s}}});var X=function(){var e=this,t=e._self._c;return e._self._setupProxy,t("div",{directives:[{name:"show",rawName:"v-show",value:e.isVisible,expression:"isVisible"}]},[e.currentView?t(e.currentView,{key:e.currentViewUID,tag:"component",attrs:{value:e.model}}):e._e()],1)},B=[],K=x(L,X,B,!1,null,null,null,null);const b=K.exports,E={projectToDirective:{inserted:(n,e)=>{y.Instance.injectTo(n,e.arg)},unbind:(n,e)=>{y.Instance.removeFrom(n,e.arg)}},screenDirective:{bind:(n,e)=>{!n||y.Instance.setScreen(n,e.arg)}}},S=class{constructor(){d(this,"screens",new Map)}static get Instance(){return S.instance}static set Instance(e){this.instance=e}injectTo(e,t){if(!(!e||!t)){var i=this.screens.has(t)?this.screens.get(t):null;try{e.parentElement&&e.removeChild(e)}catch{}i&&i.append(e)}}removeFrom(e,t){if(!(!e||!t)){var i=this.screens.has(t)?this.screens.get(t):null;try{i&&i.removeChild(e)}catch{}}}setScreen(e,t="defaultscreen"){this.screens.set(t,e)}};let y=S;d(y,"instance",new S);function _(n,e){if(n.target.validity){let t=n.target;if(t.validity){let i=[t.validity.badInput?"bad input":null,t.validity.customError?"custom error":null,t.validity.patternMismatch?"pattern mismatch":null,t.validity.rangeOverflow?"range overflow":null,t.validity.rangeUnderflow?"range underflow":null,t.validity.stepMismatch?"step mismatch":null,t.validity.tooLong?"too long":null,t.validity.tooShort?"too short":null,t.validity.typeMismatch?"type mismatch":null,t.validity.valueMissing?"value missing":null].filter(r=>!!r);e(i,t.validity.valid!=null?t.validity.valid:!0)}}}const k={inserted:(n,e)=>{if(!(!n||!n.willValidate)){switch(n.nodeName){case"INPUT":case"TEXTAREA":n.onblur=t=>_(t,e.value);break;case"SELECT":n.onchange=t=>_(t,e.value);break}n.oninvalid=t=>_(t,e.value),n.form&&n.form.addEventListener("invalid",()=>_({target:n},e.value)),e.arg=="immediate"?n.reportValidity():_({target:n},e.value)}},unbind:n=>{}};function W(n){n.component("screen",b),n.component("inject",$),n.directive("screen",E.screenDirective),n.directive("projectTo",E.projectToDirective),n.directive("validate",k)}function q(n){let e={};return{init(t,i,r,s){return s.registry&&(f.Instance=s.registry),s.messageService&&(I.Instance=s.messageService),s.projector&&(p.Instance=s.projector),s.screens&&(y.Instance=s.screens),e=r,n.init(N,t,i,r)},config(t,i){return n.config?n.config(t,i,e):null},run(t,i){return n.run?n.run(t,i,e):null},routes:n.routes}}function H(n,e,t){const i=n.default.default||n.default;return i.init(m.Instance,e,t||{},{registry:f.Instance,messageService:I.Instance,projector:p.Instance,screens:y.Instance}).then(()=>i)}function J(n,e){return(n.default.default||n.default).config(m.Instance,e)}function Q(n,e){return(n.default.default||n.default).run(m.Instance,e)}function Y(n){return(n.default.default||n.default).routes}const N={install:W,MenuHelper:new m,menuType:V,CommonRegistry:new f,MessageService:new I,Inject:$,Screen:b,ValidateDirective:k,MenuNotifications:T,Projector:p};o.CommonRegistry=f,o.ConfigModule=J,o.InitModule=H,o.Inject=$,o.MenuHelper=m,o.MenuNotifications=T,o.MessageService=I,o.ModuleInitializer=q,o.ModuleRoutes=Y,o.Projector=p,o.RunModule=Q,o.Screen=b,o.ValidateDirective=k,o.default=N,o.menuType=V,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
